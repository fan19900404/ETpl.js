{"version":3,"file":"etpl.min.js","sources":["../src/index.ts"],"sourcesContent":["interface interfaceMap {\r\n  [key: string]: any;\r\n}\r\n\r\nconst etpl = (function() {\r\n  const templateSettings = {\r\n    evaluate: /<%([\\s\\S]+?)%>/g,\r\n    interpolate: /<%=([\\s\\S]+?)%>/g,\r\n    escape: /<%-([\\s\\S]+?)%>/g\r\n  };\r\n\r\n  const escapes: interfaceMap = {\r\n    \"'\": \"'\",\r\n    \"\\\\\": \"\\\\\",\r\n    \"\\r\": \"r\",\r\n    \"\\n\": \"n\",\r\n    \"\\u2028\": \"u2028\",\r\n    \"\\u2029\": \"u2029\"\r\n  };\r\n\r\n  const escaper = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\r\n\r\n  const escapeChar = (match: string) => `\\\\${escapes[match]}`;\r\n\r\n  const templateFun = function(text: string) {\r\n    const matcher = RegExp(\r\n      [\r\n        templateSettings.escape.source,\r\n        templateSettings.interpolate.source,\r\n        templateSettings.evaluate.source\r\n      ].join(\"|\") + \"|$\",\r\n      \"g\"\r\n    );\r\n\r\n    let index = 0;\r\n    let source = \"__p+='\";\r\n    // debugger;\r\n    text.replace(matcher, function(\r\n      match,\r\n      escape,\r\n      interpolate,\r\n      evaluate,\r\n      offset\r\n    ) {\r\n      source += text.slice(index, offset).replace(escaper, escapeChar);\r\n      index = offset + match.length;\r\n\r\n      if (escape) {\r\n        source += `'+\\n((__t=(${escape}))==null?'':_.escape(__t))+\\n'`;\r\n      } else if (interpolate) {\r\n        source += `'+\\n((__t=(${interpolate}))==null?'':__t)+\\n'`;\r\n      } else if (evaluate) {\r\n        source += `';\\n${evaluate}\\n__p+='`;\r\n      }\r\n\r\n      return match;\r\n    });\r\n    source += \"';\\n\";\r\n\r\n    source =\r\n      \"var __t,__p='',__j=Array.prototype.join,\" +\r\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\r\n      \"with(obj||{}){\\n\" + source + \"}\\n\" +\r\n      \"return __p;\\n\";\r\n\r\n    try {\r\n      var render = new Function(\"obj\", source);\r\n    } catch (e) {\r\n      e.source = source;\r\n      throw e;\r\n    }\r\n\r\n    function template(data: any) {\r\n      /* tslint:disable-next-line */\r\n      return render.call(this, data);\r\n    }\r\n    template.source = \"function(obj){\\n\" + source + \"}\";\r\n\r\n    return template;\r\n  };\r\n\r\n  return templateFun;\r\n})();\r\n\r\nexport default etpl;\r\n"],"names":["templateSettings","escapes","escaper","escapeChar","evaluate","interpolate","escape","'","\\","\r","\n"," "," ","match","text","matcher","RegExp","source","join","index","replace","offset","slice","length","render","Function","e","template","data","call","this"],"mappings":";;;;;;iCAIA,IACQA,EAMAC,EASAC,EAEAC,SAjBAH,EAAmB,CACvBI,SAAU,kBACVC,YAAa,mBACbC,OAAQ,oBAGJL,EAAwB,CAC5BM,IAAK,IACLC,KAAM,KACNC,KAAM,IACNC,KAAM,IACNC,SAAU,QACVC,SAAU,SAGNV,EAAU,4BAEVC,EAAa,SAACU,GAAkB,MAAA,KAAKZ,EAAQY,IAE/B,SAASC,GAC3B,IAAMC,EAAUC,OACd,CACEhB,EAAiBM,OAAOW,OACxBjB,EAAiBK,YAAYY,OAC7BjB,EAAiBI,SAASa,QAC1BC,KAAK,KAAO,KACd,KAGEC,EAAQ,EACRF,EAAS,SAEbH,EAAKM,QAAQL,EAAS,SACpBF,EACAP,EACAD,EACAD,EACAiB,GAaA,OAXAJ,GAAUH,EAAKQ,MAAMH,EAAOE,GAAQD,QAAQlB,EAASC,GACrDgB,EAAQE,EAASR,EAAMU,OAEnBjB,EACFW,GAAU,cAAcX,mCACfD,EACTY,GAAU,cAAcZ,yBACfD,IACTa,GAAU,OAAOb,cAGZS,IAITI,EACE,6GAHFA,GAAU,QAKsB,mBAGhC,IACE,IAAIO,EAAS,IAAIC,SAAS,MAAOR,GACjC,MAAOS,GAEP,MADAA,EAAET,OAASA,EACLS,EAGR,SAASC,EAASC,GAEhB,OAAOJ,EAAOK,KAAKC,KAAMF,GAI3B,OAFAD,EAASV,OAAS,mBAAqBA,EAAS,IAEzCU"}